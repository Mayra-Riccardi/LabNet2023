@model List<Practica3.EF.Logic.DTO.EmployeesDto>

@{
    ViewBag.Title = "Employees Page";
}

<h3>Insert new Employee? Click Here </h3>

<div style="margin-bottom: 20px;">
    @Html.ActionLink("Insert new Employee", "Insert", null, new { @class = "btn btn-success" })
</div>

<h1 style="margin-bottom: 15px;">Employee List</h1>

<table class="table table-dark table-striped">
    <tr>
        <th class="hide-employee-id">Employee ID</th>
        <th>Employee Last Name</th>
        <th>Employee First Name</th>
        <th>Employee City</th>
        <th>Employee Country</th>
        <th>Actios</th>
    </tr>

    @foreach (var employee in Model)
    {
        <tr>
            <td class="hide-employee-id">@employee.Id</td>
            <td>@employee.LastName</td>
            <td>@employee.FirstName</td>
            <td>@employee.City</td>
            <td>@employee.Country</td>
            <td>
                <button type="button"
                        class="btn btn-danger"
                        onclick="deleteEmployee(@employee.Id)"
                        style="margin-right: 20px;">
                    Delete
                </button>
                @Html.ActionLink("Update", "Update", new { id = employee.Id }, new { @class = "btn btn-warning" })
            </td>
        </tr>
    }
</table>


@section Scripts{
    <script type="text/javascript" charset="utf-8">
        const deleteEmployee = (employeeId) => {
            Swal.fire({
                title: '¿Está seguro?',
                text: "No podrás revertir esta operación!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'Cancelar',
                confirmButtonText: 'Si, Eliminar!',
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("mandó a eliminar");
                    confirmDelete(employeeId);
                } else {
                    console.log("No eliminó");
                }
            });
        };

        const confirmDelete = (employeeId) => {
            fetch("@Url.Action("Delete", "Employees")", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    employeeId: employeeId
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: '¡Bien!',
                            text: 'Empleado eliminado!',
                            icon: 'success',
                            showCancelButton: false,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.reload();
                            }
                        });
                    } else {
                        Swal.fire({
                            title: "Ups Error",
                            text: data.errorMessage,
                            icon: "error"
                        });
                    }
                    console.log("Hola soy data", data);
                })
                .catch(error => {
                    console.error(error);
                    Swal.fire(
                        'Error!',
                        'Hubo un problema al eliminar el empleado.',
                        'error'
                    );
            })
        }
    </script>
}
